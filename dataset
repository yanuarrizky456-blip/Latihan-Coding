import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import KBinsDiscretizer

from sklearn.metrics import accuracy_score, precision_score, confusion_matrix, classification_report
from sklearn.metrics import roc_curve, roc_auc_score, precision_recall_curve

import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('computer_prices_all.csv')
data.info()
data.describe()

print(data.isnull().values.any())
print(data.isnull().sum())

data = data.fillna(data.mean(numeric_only=True))
print(data.isnull().sum())

features = ['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','FullBath','YearBuilt']
x = data[features]
y = data['SalePrice']

discretizer = KBinsDiscretizer(n_bins=4, encode='ordinal', strategy='quantile')
y_binned = discretizer.fit_transform(y.values.reshape(-1, 1)).flatten()
print("Data Target Setelah Diskritisasi:")

unique_values = set(y_binned)
print("Nilai Unik Dari y_binned:", unique_values)

for bin_idx in range(4):
    bin_mask = (y_binned == bin_idx)
    print(f"Bin {bin_idx}: {y[bin_mask]}")

x_train, x_test, y_train, y_test = train_test_split(x,y_binned, test_size=0.2, random_state=42)
print("Shape of x_train:", x_train.shape)
print("Shape of x_test:", x_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test", y_test.shape)

y_train = y_train.astype(int)
majority_class = np.bincount(y_train).argmax()
y_pred_baseline = np.full_like(y_test, majority_class)

model = DecisionTreeClassifier(random_state=42)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
labels = ['Low', 'Medium', 'High', 'Very High']
baseline_accuracy = accuracy_score(y_test, y_pred_baseline)
print("Baseline Accuracy:", baseline_accuracy,"\n")
print("Decision Tree Accuracy:", accuracy)
print("Decision Tree Precision:", precision, "\n")
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
print(classification_report(y_test, y_pred))